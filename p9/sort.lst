     1                                  ; Everett Reynolds
     2                                  ; P9 - Sort
     3                                  ; 11-10-20
     4                                  ; We happen to be sorting an array in increasing order
     5                                  
     6                                  %macro printA 2
     7                                   	mov eax,4
     8                                          mov ebx,1
     9                                          mov ecx,%1
    10                                          mov edx,%2
    11                                          int 80h
    12                                  %endmacro
    13                                  
    14                                  %macro printP 2
    15                                   	mov eax,4
    16                                          mov ebx,1
    17                                          mov ecx,%1
    18                                          mov edx,%2
    19                                          int 80h
    20                                  
    21                                  %endmacro
    22                                  
    23                                  %macro  callitoa 2
    24                                          pusha
    25                                          mov     ax,%1
    26                                          mov     ebx,%2
    27                                          call    _itoa
    28                                          popa
    29                                  %endmacro
    30                                  
    31                                  
    32                                  SECTION .data
    33                                  ; define data/variables here.  Think DB, DW, DD, DQ
    34 00000000 64C8050A005816          nums:	db	100, 200, 5, 10, 0, 88, 22
    35                                  numslen:	EQU	($-nums)
    36 00000007 1B5B324A                cls     db      1bh, '[2J'
    37                                  clsLen  EQU     $-cls
    38 0000000B 20200A                  output: db "  ",10
    39 0000000E 64                      hundred: db 100
    40 0000000F 0A                      ten: db 10
    41 00000010 4F726967696E616C20-     originHead: db	"Original Array",10
    42 00000019 41727261790A       
    43                                  originLen  EQU     $-originHead
    44 0000001F 536F72746564204172-     sortHead:   db  "Sorted Array",10
    45 00000028 7261790A           
    46                                  sortLen  EQU     $-sortHead
    47 0000002C 1B5B324A                clr             db 1bh,'[2J'
    48                                  
    49                                  
    50                                  SECTION .bss
    51                                  ; define uninitialized data here
    52                                  
    53                                  
    54                                  SECTION .text
    55                                  global _main,_itoa,_convert,_sort
    56                                  _main:
    57                                  ; put your code here.
    58                                  
    59 00000000 B804000000              	mov     eax,4
    60 00000005 BB01000000                      mov     ebx,1
    61 0000000A B9[2C000000]                    mov     ecx,clr
    62 0000000F BA04000000                      mov     edx,4
    63 00000014 CD80                            int     80h
    64                                  
    65                                  	printP originHead, originLen
    66 00000016 B804000000          <1>  mov eax,4
    67 0000001B BB01000000          <1>  mov ebx,1
    68 00000020 B9[10000000]        <1>  mov ecx,%1
    69 00000025 BA0F000000          <1>  mov edx,%2
    70 0000002A CD80                <1>  int 80h
    71                              <1> 
    72                                  	printA nums,numslen
    73 0000002C B804000000          <1>  mov eax,4
    74 00000031 BB01000000          <1>  mov ebx,1
    75 00000036 B9[00000000]        <1>  mov ecx,%1
    76 0000003B BA07000000          <1>  mov edx,%2
    77 00000040 CD80                <1>  int 80h
    78 00000042 E875000000              	call _sort
    79                                  	printP sortHead, sortLen
    80 00000047 B804000000          <1>  mov eax,4
    81 0000004C BB01000000          <1>  mov ebx,1
    82 00000051 B9[1F000000]        <1>  mov ecx,%1
    83 00000056 BA0D000000          <1>  mov edx,%2
    84 0000005B CD80                <1>  int 80h
    85                              <1> 
    86                                          printA nums,numslen
    87 0000005D B804000000          <1>  mov eax,4
    88 00000062 BB01000000          <1>  mov ebx,1
    89 00000067 B9[00000000]        <1>  mov ecx,%1
    90 0000006C BA07000000          <1>  mov edx,%2
    91 00000071 CD80                <1>  int 80h
    92 00000073 E844000000                      call _sort
    93                                  
    94                                  
    95                                  lastBreak:
    96                                  ; Normal termination code
    97 00000078 B801000000              mov eax, 1
    98 0000007D BB00000000              mov ebx, 0
    99 00000082 CD80                    int 80h
   100                                  
   101                                  
   102                                  _itoa:
   103 00000084 60                              pusha
   104 00000085 B10A                            mov     cl,10
   105 00000087 F6F1                            div     cl
   106 00000089 80C430                          add     ah,'0'
   107 0000008C 0430                            add     al,'0'
   108 0000008E 668903                          mov     [ebx],ax
   109 00000091 61                              popa
   110 00000092 C3                              ret
   111                                  
   112                                  _convert:
   113 00000093 60                              pusha
   114                                  
   115 00000094 BB[0B000000]                    mov ebx,output
   116 00000099 30E4                            xor ah,ah
   117 0000009B F635[0E000000]                  div BYTE[hundred]
   118 000000A1 0430                            add al, '0'
   119 000000A3 8803                            mov [ebx],al
   120 000000A5 43                              inc ebx
   121 000000A6 66C1E808                        shr ax,8
   122 000000AA F635[0F000000]                  div BYTE[ten]
   123 000000B0 0430                            add al,'0'
   124 000000B2 8803                            mov [ebx],al
   125 000000B4 80C430                          add ah, '0'
   126 000000B7 43                              inc ebx
   127 000000B8 8823                            mov [ebx],ah
   128                                  
   129                                  
   130 000000BA 61                              popa
   131 000000BB C3                              ret
   132                                  _sort:
   133 000000BC 60                      	pusha
   134                                  
   135                                  
   136                                  
   137 000000BD 61                      	popa
   138 000000BE C3                      	ret
